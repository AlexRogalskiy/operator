apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    capabilities: Auto Pilot
    categories: Monitoring
    certified: "true"
    containerImage: quay.io/f41gh7/vm-operator:latest
    createdAt: "2020-06-01T11:59:59Z"
    description: An operator to run the VictoriaMetrics applications
    repository: https://github.com/VictoriaMetrics/operator
    support: VictoriaMetrics support with telegram and slack channels
spec:
  description: |
    # VictoriaMetrics operator for Kubernetes

      docs:
      -  quick start [doc](/docs/quick-start.MD)
      -  design and description of implementation [design](/docs/design.MD)
      -  high availability [doc](/docs/high-availability.MD)
      -  operator objects description [doc](/docs/api.MD)
      -  backup [doc](/docs/backup.MD)

       possible configuration options are available at [url](https://github.com/VictoriaMetrics/operator/blob/master/vars.MD)

    ## VictoriaMetrics

      VictoriaMetrics is fast, cost-effective and scalable time-series database.

    ## Prominent features

      * VictoriaMetrics can be used as long-term storage for Prometheus or for [vmagent](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmagent/README.md).
      See [these docs](#prometheus-setup) for details.
      * Supports [Prometheus querying API](https://prometheus.io/docs/prometheus/latest/querying/api/), so it can be used as Prometheus drop-in replacement in Grafana.
      VictoriaMetrics implements [MetricsQL](https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/MetricsQL) query language, which is inspired by PromQL.
      * Supports global query view. Multiple Prometheus instances may write data into VictoriaMetrics. Later this data may be used in a single query.
      * High performance and good scalability for both [inserts](https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b)
      and [selects](https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4).
      [Outperforms InfluxDB and TimescaleDB by up to 20x](https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae).
      * [Uses 10x less RAM than InfluxDB](https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893) when working with millions of unique time series (aka high cardinality).
      * Optimized for time series with high churn rate. Think about [prometheus-operator](https://github.com/coreos/prometheus-operator) metrics from frequent deployments in Kubernetes.
      * High data compression, so [up to 70x more data points](https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4)
      may be crammed into limited storage comparing to TimescaleDB.
      * Optimized for storage with high-latency IO and low IOPS (HDD and network storage in AWS, Google Cloud, Microsoft Azure, etc). See [graphs from these benchmarks](https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b).
      * A single-node VictoriaMetrics may substitute moderately sized clusters built with competing solutions such as Thanos, M3DB, Cortex, InfluxDB or TimescaleDB.
      See [vertical scalability benchmarks](https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae),
      [comparing Thanos to VictoriaMetrics cluster](https://medium.com/@valyala/comparing-thanos-to-victoriametrics-cluster-b193bea1683)
      and [Remote Write Storage Wars](https://promcon.io/2019-munich/talks/remote-write-storage-wars/) talk
      from [PromCon 2019](https://promcon.io/2019-munich/talks/remote-write-storage-wars/).
      * Easy operation:
          * VictoriaMetrics consists of a single [small executable](https://medium.com/@valyala/stripping-dependency-bloat-in-victoriametrics-docker-image-983fb5912b0d) without external dependencies.
          * All the configuration is done via explicit command-line flags with reasonable defaults.
          * All the data is stored in a single directory pointed by `-storageDataPath` flag.
          * Easy and fast backups from [instant snapshots](https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282)
          to S3 or GCS with [vmbackup](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmbackup/README.md) / [vmrestore](https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/app/vmrestore/README.md).
          See [this article](https://medium.com/@valyala/speeding-up-backups-for-big-time-series-databases-533c1a927883) for more details.
      * Storage is protected from corruption on unclean shutdown (i.e. OOM, hardware reset or `kill -9`) thanks to [the storage architecture](https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282).
      * Supports metrics' scraping, ingestion and [backfilling](#backfilling) via the following protocols:
        * [Metrics from Prometheus exporters](https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#text-based-format)
          such as [node_exporter](https://github.com/prometheus/node_exporter). See [these docs](#how-to-scrape-prometheus-exporters-such-as-node-exporter) for details.
          * [Prometheus remote write API](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write)
          * [InfluxDB line protocol](#how-to-send-data-from-influxdb-compatible-agents-such-as-telegraf) over HTTP, TCP and UDP.
          * [Graphite plaintext protocol](#how-to-send-data-from-graphite-compatible-agents-such-as-statsd) with [tags](https://graphite.readthedocs.io/en/latest/tags.html#carbon)
          if `-graphiteListenAddr` is set.
          * [OpenTSDB put message](#sending-data-via-telnet-put-protocol) if `-opentsdbListenAddr` is set.
          * [HTTP OpenTSDB /api/put requests](#sending-opentsdb-data-via-http-apiput-requests) if `-opentsdbHTTPListenAddr` is set.
          * [/api/v1/import](#how-to-import-time-series-data).
          * [Arbitrary CSV data](#how-to-import-csv-data).
      * Ideally works with big amounts of time series data from Kubernetes, IoT sensors, connected cars, industrial telemetry, financial data and various Enterprise workloads.
      * Has open source [cluster version](https://github.com/VictoriaMetrics/VictoriaMetrics/tree/cluster).
      * See also technical [Articles about VictoriaMetrics](https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/Articles).

      See our [Wiki](https://github.com/VictoriaMetrics/VictoriaMetrics/wiki) for additional documentation.

      [Contact us](mailto:info@victoriametrics.com) if you need paid enterprise support for VictoriaMetrics.
  icon:
    - base64data: iVBORw0KGgoAAAANSUhEUgAAA8AAAAGQCAYAAABhxwlFAAAgAElEQVR4nO3d21EbyxoG0EkA8VvYVX7sEByCQ3AIDoEQyIAQCIEQCMEhEAIhnPOAtLdgYzSS+jqzVlW/nLPLzE3T/U3fpgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALryPSJ9jfh5WG6urn5vI+7+ViLiKWvZbB4++3vvj+9rxM/W1w0AAICGDsPsu8D6eBA4n79cX/9vaeVdoL7fn/tNxC+hGQAAYCD7cLvvnY3N5mEf+FqHz9FKRDzvrt3j+17m1vcZAABgFfYhdxdw75fcY9t7OQzIN1dXv4VjAACAM6RpioOg+6AXd5yy7z3eB+NvET9aP08AAABdSIdh93Uu7nPrEKcUCcZPsdncC8UAAMBqfI9IN1dXv3c9u39aBzOlWSB+2fcUGz4NAAAsQpqmOAi8z62Dl9Jv2QdiPcQAAMAwvkekbcStHl7l3BIRL7HZPNxE/Gr9PAMAALwh9CqlijAMAAB04ebq6rdVmpVaZReG779HpNbPPgAAsAK73t67iHhpHYiU9ZaIeNIrDAAAFPE9IsVm89A6+CjKYYmI55urq9+tfx8AAMACpGkKPb5K7yUinmypBOv0LeLH14ifN1dXv7cRd/sSm819RDz9Uzab+8P//2vET+8NerR/NrcRt2+e6YjHg2f68fD/80wDZPA14qfti5SRSmw292maovVvJ6c3Dfjzy76hdLvEOdQ3Eb8+aByeXUptx/WfQJaplDjWXu1Cwf5eZ1t4MSKe97+TngJEiedlaWXkUUBpmuLgmX6KjG2uiHiJeN1i8CbiV1pY3fiRbxE/mj6P7z6y7evd/YeJtIJ7sKe+O98ufxV5RtOKnsGzbCPuWocZRTmnRMSfJYW8iPwLzS3lQ8FNxK/IPDolIl5SoWtT4l5+ub7+X4lj7cXBLgOPDd4lj60/GrV+n45QthF3re7POb5F/NgF3uo7Z0TEn9hs7kt95Gvta8TP1s/jzPvwFJvNwz4ct75uJajvzldyyunIHwyLM9dXGb1ExMtSKvibq6vfha7RnzRwCC71norN5qHYMWsQzJJep97ctggIn/xemvQ0tj7vEcoIAfjgQ85z6+t18Ew/L21nhVEC8F/uR/MPbjmp786TpikKP2er6EU/WWw2961fAoqSo0TEy4IqkiJz8CPisfW5naPUR4Ev19f/K/nhRIPgc98ifvT+ATYiXrYRd7XeLa3Pd4TScwD+GvGz92d691wvYh2NkQPw+/txc3X1O438kVp9d5aS7Zt9WUrbOJulvDgUZV+W8qWr5Iep0XrK0zRFwQ8Cf0oeuwbBx/bznVq/L05+XipMJWh9jiOUHgPwsM90jL3F4NLasfsPbmnAIKy+O0+NkU+x2dy3Ps+ujPiyVpRjZQlftb9HpFLXp+SQ3xJKfh0tPcRVg+Ct7xFp9Hpn30AtdY1an98IpacAvF+EqfU1yfBcD9kjvLQAfHA/hgvC6rvTfYv4Uel5em59rt1IhcecK0qrspQvXaUqk4h4aX1upyi1GFLJxa8Ojr3IPSx5zCWkaYqlTbeJiD8lRlO0Pq8RSg8BOC3wmf5y/fqBNA0UupYagP+5HxEvo/TQq+9OV3O6xCjPUXFLf2ko6y1LGQZdtOdzkBfh6D3hGgTL314vdxhrfT4jlNYBuMRq9D2VkULXWtqyI3yYUN+druZ7ZNQ1YLKr1e2uKLXLkn7ka18MaxtxW+o5qTEXeu0NgiX2kP3l95Rtr8XW5zJCaRWA02uv70Pr869VIuIxdR661hKAd/ej650c1l7fnarG4lfvi8Wwdpb8BVNZb9lG3Lb+beVSMkCkjivSvVKLQ5Re/Org+J9KHH+NY7/Ebq5vN1sa1Si5hkS3Po8RSosAvJvru6pn+st1uaH+uawpAO/vR+q07l5rfXeuFmsHLKl9fJFtxF3rH7Oi5Cw15nXWVHIIcO+boy/h3NfYINgFhVV+XM2xH3nrcxih1A7Aa36mv1z3PSR6bQF4dz+6DMFrrO/OVbJ9c+TZsRjWNP2zvchz6x+zouQqS/y6VXAxrCq9oOcq1ftd8yPJ2hoEN1dXv9ccFPbP1yXDzFof/wilZgBuMUyx19LjR9M1BuAv133W32ur7y7RsgNyxNXei1j7l01lOWW07X3mKtkA63k+SKmPczWfkzU1CASF3fN14SJ8rY9/hFIrAHum/1t6C8FrDcBfrvvb8WJN9d2lWnY+LrWtfBYhWBm9LP0HXer32Xo11b8p2aipOZ9tLQ0CQWH3HsowuqD1OYxQary3PNN/Lz2F4DUH4C/XffXmraW+u9RNxK+Wz8zSpgpeTAhWRi1LD7/TVHQ4cJfzQUqttFp72NgaGgRrb4AelhyN0dbnMEIpHYCF3+OllxC89vdPT3X4Guq7HCLisfVz08vvtxtrXLlTGbsscc7vR0oumNDjCp+lPsbVfukvvUHgw+mbd9Fdjmva+jxGKCUDsGd6fumh7lh7AP5y3U+YWXp9l0Oapmj9vHy57nMOeXPpdWEsIVjpvvTy0q+l2GJYnc0jKjU8qMWwnyU3CJJFFA+frYvm/R5qfS4jlFIBOL0+08LvzHLpgm85lArAsdk8bCPuPiux2TxExNO+NLwPXfQCL7m+y2Ubcdv6d7svPXzA6k4SgpXOy9rC7zSVG5YXES+tz+1QqeFBLYbKL7lB0MMwroj4ExGPuwbp7deIn+/LNuJ2G3EXEY8l6rXcIeBYoztHKTjF4KnG8Zea99gyxOyfpYh4is3mfhtxdxPx6y/P9N3umX5q/RGqdU9SqQB87jP2PSLdXF393oXjah9TeggzS67vcmn9e33z2+2s86MrpSpJRTm35Nhnc2TFhgZ3ssdjKjg8qMVzs9QGQcuv2BHxeHN19Tud2ZufpilyNlB7+e2colRo6HVRvTlabUsSEX+2EbeXvJ/+CV2NPkq1bEj3FoAPpWmK3YeK4kG4hzCz1Poul28RP1r8Pv/6zHTW+dEdIVjppaw9/E5TwcWwOllIrGAvd5NeiiU2CHZrRVQdJhoRz9uIu5R5CHt6baDenvtVvodG5zkE4LdaNExjs3koMXz4e0SqFboOS6vViHsOwHvpdVRl0Y8TPQyDXmJ9l1OPeWqNoylPUqrRrShzS0T8WXv4naayi2GlDpbFL1WBtnrJL7FBUHOYaES81ApVp4aG1kM/LyEAv1Vzylep4Pte2vU+VvytNglgIwTgvdIBqPV87CXWd7mkjOsL5LzOEfHY+tp0z7YASqsSEX9SB+GsF0sLiXulwn3LPe+W1iCoWQ9ExFPtBt2ud/voPeth8Z9LCMD/qjWcPyKeW/SS7la1rhLwW9z/kQLwNJVdO6F1Hb60+i6nnHXnbtRStudo5LqsGiFYqV2E3/8qOEw420q25yjVEG05vHtJDYJUcdXn1tub7eZTfvi1fglTMQTgV6nSqs8R8Zga12M1hl+2+Ng4WgBOBZ+51r+/JdV3ueX8CPUt4kfmQH3X+voM4WvET9sEKDVKbDYPSfj9UKnfYMsvgaXCVcuwsqQGQY3hlBHx0roXYy/9Oz/4aXdsf2oNXy1NAH5V5ZnuZH2FaVrm+Y4WgKdpuR+xl1Tf5ZRzdNt+qkGJf5MZbBSvlC49NRp6VGpefquet1KL0LSep7mUBkGq1FM2es/qKATgOs90j/VYjSHfNT8SjRiAp6nMR2wBuE8522uH75Scvcoj7mbQzC4EP5d+kSrrK6OurFpTwfmybVZLLhToW/cmLqVBUKPR3PperYkAXL43tOfFZUoPh64Z/IcNwIXuQcljPnpOC6nvcsv5seMwqOasl3v8WNe19PoFtdrqicryi0bwfKUqm0b75T7nPo+Wi18dnFeRe9TgPLLfn8MyUnBaAgG43DSS3bvnOXU+fadk263mu3fUAFzqo2LJYz5mKfVdTjcRv3L+rg7/7dwdIanzd1Z3khCsZCrC72mKzSOq3AOfs4J4dx7Nv2guoUFQ6v78c58aD9tbo7UH4NILeo4wlL/0ft61ptOMGoBLHXfJYz5mCfVdbjlXa/6oTZMzf7VefHJIqcIm38pyS0S8tNgeYgkKzSOquiBCqaFgPTRCl9AgKPluH307oVGtPQAX7f0caApPyWHgteoRAbhd3fDeEuq7nHL30H40TzfrMOiB97ZvrsYy+8qyyhK2FGmp2NzZigsiLHExkL3RGwRpmqLk73+UwLQ0aw7ApdZP2NdnabBhhCWnN9So2wXgNnXDR0av73LL+YHp/fDnvdzvM+3xCwjBytwi/F6u2GJYlYYPlxqK2Mtw+tEbBCUXvxphnuRSrTkAl3ymRzj/90oOB6/RGy4Av32nljzmY0av73LL+XHpszZZzhEtPUwdG1rp+TXK+CUi/iSN3yxKVDq1ejJKDK/925fSFkZvEJQc/tzLR4o1WnMALjX8ecTe371Sc4FrBDIB+M31tg1SJ3Lf38+ex8zDoId9j3VDCFb+VoTfvEbtRU2Fhtf2NAdv5AZBKjj8WSXb1loDcNHhzwP3nJSaSvPluvyQylEDcImRCK233hq5vsst52jYYx+Sss819nH6cjcRv0pvNK+MVSLiMWn4ZldoHm3RyrTUUMSeFlUauUFQcvXnnj5SrNFaA3DJD/MjT+cp+WGg9MqyowbgEtMFW//+Rq7vckqZPx7PqS9zXvvWIwkW41vEDyFY+XI99hfy3pX6gl8yTJYYitjbi3vkBkHJFWJHDgtLsNYAXGqNktZzL3MoODS86IfUYQNwgcXHWu+mMXJ9l1PuD21z6svcf7OnjoShCcGK8FtWqS/4pb7elzre3obujNwgKHXsSwgLo1ttAC4V8hZQv5X64FV6TYYRA3CpY06NR9eNXN/llHVRqpn1ZWrQ68xM6XWv4GJ77yn9lt5CyVIVWgyryL5wJRpbPS1+tTdyg6DU+0DF2t5aA3CxOq7itnGllHomvlyX7U0aMQCXGInQw+inkeu7XL5F/Mh6X0+oL3MuWrnoD9XfI1LtYWhJCF5daRF+l9AYOUep+W0lGi8lhn/1GKxGbRCUnBO41t9nT9YYgEcNeDWVuj4j9qaWOuaCv72ic63nGLW+yyn3x41T3i2524CLrau/RvyMiJfaJ5heQ3CxrTWUPkrDZ+uphy+hrRRZDCtzsMz9hXRfemyEjtogKBkWkkXwmltjAC71gXBJPSWlOihKPhcjBeD02kZ5Xup7ddT6LqecbbBTR+Cl3MOgG68qXszhS6NFL12pxSiU9iUiXlqOLlh1AC6wGFbuBl6hY+zyno/aICg4H3AxYWFkawzABZ/pLt895yi2SFjBOdKjBOBUcARkL3PQR63vcsn9ke2cXv3cHYw9dixc7P1LQwhWcpSIeG49tH5JDZJTlRq6mrMxUKKXutd55qM2CISFZVtjAC418qzHqRfnGvF3P0IA3i0EW2z6Xy8hZdT6Lpfc53/Ofe0hhHfvo5dGi69IJfflU+qWiPiTKg/D+WiF8bU3sosshpXp3VBib9keF7/aG7VBICws20oDcJHfYs/nfKpSe3+vNQCnaYqS28nt3qld9P5O07j1XQ65Ox/OXYA05R8GvbxRW397aQjBypk/ki7C7+5YVh2AS/yecoXMIqtfdhyqRm0QCAvLJgDnK0taKKbk3P/RjvmSAPwt4kdsNvelt/+MiJdeen+nadz6LofcHzou6XnN/QG79f7S2X320oiIx1Q5zOwX5Sr5slDKlNhsHmo/LzcRv/72vKw9AE9Tn8OMU+Yvk/vSUwPgvVEbBAUD8PKGUw1opQG4SPtiSY1DAfjtu+prxM9j5Sbi1zbibhtxt1uEs1o7trf36aj1XQ65Fze7pF2TuxOkp1EGWRx7afTUo6f0W3ocMSAAF1to6qIVAQv1THd9r0dtEJQ67iWFhZGtMQCXON+lPdMltz8rdcwlQ3vPpccVeket7y6Ve+rAucOf91L+YdAvqYNVxrOZ89JoGIKfW79clBk/igZDT+eEqN5DUQ2lGjLpgvdBiXmlvS5+tTdqg0AAXjYB2DP9N6WuU6njXWMAbtE2n2PU+u5Suds2OXr2cx9T722tk8x9abTe0kbps/S8argA/KpEZXTui7lEIO958au9URsEAvCyCcCe6b8pdZ1KHe/aAnBv834PjVrfXSIVmNqV4/5mHwZ9Ya90V055aQjBymHpOfzunlcBeCo25Pisl+A24jb7sXS8+NXeqA0CAXjZBGDP9N+Uuk6ljndNAbhFW/wUo9Z3l8jdtskVNFOBYN7zs3eSU18aEfHSYrVDewX3Uxp+CDlpKIcA/K8Sc+rP+TpZ4mNWr1/BD43aIBCAl00A9kx/xBzgfktE/Ok9gIxa310i95TNnAub5R4GPUKnwyznvjR67/1TypSRRgEIwP8qsRjWqY3cQsOfh7jHozYIrAK9bGsMwFaBPs4q0H2WiHhKHc75fW/U+u5c3yJ+5D7XnB/2CwyD7n7a2SyXvDRahODSm4krnz701b88fo9I5/YajhKOaigUPk/aGL1ECB9lQYZRGwT2AV62lQbgIs+0fYDbvrOWHoB7/k29N2p9d67cnXO559mmAsOgR2l7ferSl0aP298o+cuI22EJwG+VqJRO+SCSe4jQSF8hR20QCMDLJgCv45xPlXs7l4N3drE6eakBOCKeeh/y/N6o9d050usIxayjSkqMkMo+DLrD7bdOluOl0SoE2yu4Tmkx7CbHXtAC8FtFFsOa+dsv0TgZaR7KqA2CUiNu/Db7sNIAnH0btt7P+VQj/u6XFoAj4nnUXrZR67tzlGhXlVjXZJTjrCrXS2PUkKQcua8Df9zQyP6v3L+Xub2wJebvj/TyHbVBULAhvJytFAa2xgA8YrirrdR6KyXbE0sJwBHxNGrw3Ru1vjtH7oU9S9WNqcAw6J7f87PkfGmMOExW+eR+Dj68fUkNklyKzMOdMfetQPAe6t6O2iAoNRSyxrFz3EoDcPat2HbvpJPWROjZiMPElxCAI+Kl59/OXKPWd6cqsbZKyQUiCwyDHvudl/ulERF/avfMJHsFZy+NFjjLvY/aUCGphkKLYX06F6REiBrtC/moDYKSjcolrZo7qjUG4JLPdBpghd45Sl2fkguFLSEA70tEPI827/fQqPXdqUp0KJTMTyWGQQ+9+F+RuXkDbZWjfPBAL2SLKwH4YyUqp/RJw6/AConDLH61N3KDoNR7xlZI7a0xAKcCQwH3ZejG4E6JLV32pWS7cEkB+J/nabAPvXsj13enKDCyrejUoFTg3ddipGg2pV4azUKwvYIvumctemWKzTcSgD9U5CvgJxV19kpioMWv9kZuEORevdvvsx9rDMDTVPCZHvDd9F7BIeJFP1wuMQB/uR4zBI9c381VYmRbRDxHxFPhkn3KaBp15EvJl0ZEvCylN3HppWGv/VPBc9LA/osCWxJ9OAy6RCUx0uJXeyM3CEqtmvvleuCKcyFWG4DLfXQde07clH9Rn4NrU7Q+LtiZ8+eTMFFl1OFoIXjk+m6ukvXiaGXY0Vw1vpo1mk9aZKXHJZaI+LPEIesC8N+V+H2kD8JMgeHPQ97TkRsEJd+lozXslmatAbjEKJh9GXnuZok1Imo9E6We5WOj4tI0Ren2ZkS8jPThd+T6bo6Sv5MRy7C7OtQaNtKiQixZyS2lNFy5u/iX01HDUg0lXuAfhZncw21GDUwjNwgKjxIas+JciLUG4JIN2JGHQZca/vzluvyHgVYBeK90e3Ok9szI9d0cOtj+W4b88Fdz3sTIe8ousUTEY1rwtlUjVRgtFFgS/80w6AIrzA+3+NXe6A2Ckr9Zq0G3s9YAPE1Fh/q+pEGH9hec71/83d06AE9TmVWBD8soH4BHr++OKfU7GbkMuRhWyRX/erlI9gpe5304tj3P2pWYn5sOGn65GwMj96yM3iAoOd9pyIpzIVYdgAuGlVGCyqGSPZg1fuM9BOD0OrWrWBtnlI8ro9d3n1nqYmtreTb/o8GFajXs9rn1Q9JDaREkWgxHH6ER1lru38Rhwy93D8tIc6DeG71BUPr3O+TwqQVYcwAu+fE/Ip7TYI3Bku2jGttD9RCAp6nsMPIv12N8CB69vvuMRXb/Xkb88FdsKNCnP+IGITjZK7jJA9pqLvYS9mQsLfdcln2ve+45dqMPZx+9QZAK7p26hPs7qjUH4Gkq2/YZ5RpMU+He30orY/cSgKep/BDZ3qeNjF7f/U0qXA+OXoasx0vPW/jkYj0vbeudXkvDLamaPFtfrm2xMkeBoPoyTfkbVEN+WTywhAZB6W0fRr/HI1p7AC4c/IZYuTcVHrZb61noKQCXHibb++KBS6jvPmJh3eNlhHfeG7XnAb/7IVfff3aa1jWMYY3X2Pzf+XIHm68RP3Pe+5EXv9pbQoOgwiqnQwSGJVl7AE7l52x2HVSmqfyHrVq/6Z4C8DSVe+cf/Ma63Xt1CfXdX85r1SNI55QRhuj/R8te0Yh4aTGko2XvZMVr26aXvfEHht6HCPUk92JY24i7nEPAhnyhvrOUBkHpRexaTI1Zs7UH4Gkqv6VJz4u8LencewvApfeK7XnRoaXUd4dadhSOVGpNecjqe0RqvVLymuanVnoQVznPegmBqbasgdXiV/+xlAZBjf0PewwMXyN+7kvrY8lJAC4fVL5c9zm8v0bbp+a7u7cAPE3lO1l6Hem2lPruzTmtaNTopWXI9Xd62C6oVQhufd65S0Q8pXWG3+4azyPodWP3IRdV+MBSGgQ1wkJPv+ObiF/vPw61GFVTigD8qsZosJ5CcI3wW/s33GMAToWH2F96fKUspb57d06LygglS68fZo7qIQSvYY9a128Z570UtYLNqaWnRuMlltQgqPUlPDabh9RwiN9noajVugq5CcCvUoWgsn+mW59rrY+dtUfu9BiAp6nK2gndDTldUn03TcseKVqqDDtybzccenU9eUvYK7hFw6OH8LuUoNRS6cVQTn4HLGDxq70lNQhqfiyJiD+97hSwhBAsAP+rVjCMiD8tGofp9bmu8o5vMQ2p1wA8TeUXT+rt97ak+q7k+Sy59LxI21Gph+GsKx3Ge25Z6/Bx4TeP3IthXfz7X9Bc7qU1CGoOmY+Il1qV6W7I8+z32eghWAB+q1bdv3um71Kl9s024rZWPd1qcaaeA3CFbZG6WkF/SfVdqQ++Pc2TLTGqq8eRCSdJHYTBhgs5ddUbduQavbT4MbUeFtJqb+Ml62kERE8V+qWW1CCYpnpDRt/93p9L/d6/Rvw89x5FxHPqdDXWYwTgt0oHlQ+enWJBOE1T7D5QP9c8p1YN+54D8DSVH2HV03oZS6rvSnzs7W10W6nOjx7np5+s9epnrYYMtT7vuT+kFj0QrRdNGr3npVet7+vB/e2mMs9hSQ2CvVYjBiLieRtxd2md8D0i7QLCxR95R92+SQD+r1bbI0bE483V1e90wXOUpiluIn7FZvPQYmRWy8Vveg/AVVYb76RXcUn1XYkPSD2sBfBeifdFj+d5ltZhsGHQu2153keuySo/DAi/5fSyGNbSevaX1CB4d15NR8pExHNsNg/biNuvET8/ei98i/ix38JoG3G3CwfZRzaNGIIF4I91MPLtOSIetxF3N1dXvw+34TosNxG/Sj7Tpx5zavj89x6Ap6nCvsudjEZZSn1X6iNvLx8qDhUaBt3tXtUna9071Cr49DDP9YNr0WZ+dPvwW31RnLXpINR0NTwoh6U0CN5LDYZC91xGC8EC8Md2C4F6ruc/980/So8QgFOF92UPv72l1Hcl2kK9tm++Rfwocc8W1ZnRet5nqwvaw0rH//yAGgwrSCudD75GrRfDWtLiV3tLaRB8pPa8yd7LSO8pAfjvPNfzSw+N3BEC8DTVaUO3/hixhPouTVOUOIeehwUXGe4d8af1eWW18hDcNAS2WFo8Cb+r03IxrCUtfrW3hAbBZ3qeKtLofTXEHHYB+HM9tHV6L73c61EC8DSVH2Lf+v2zhPquVJ3W4/DnvVLrH7T+IJPdbtXMpj2iLXqKUqMVolut9NxDz3dsNg9J+K2q1XSH1hV3KUtoEBzTenpET2WUr94C8HFC8CfPeUe9WSMF4BqjC1r2yi+hvivUG9rl8Oe9UsOglziqr5tw1OLcd/tFZv+B/O0cU4MAuOb7u3atFsPqYShdCUtoEMwhBPezEM0cAvA8QvAHz3lndfNIAXiaqmyL1GwBotHru4JBsKvfzEfWGPzP1kVIinhMDX7oaZpiG3FXKgjHZvPQah+tHhb+WuRXo4HUHumw2JfkNH6D4BRrDsE9LAZ0CgF4PiH44DnvsCE/WgCu8ZG5VRtq9PquVB3W8/DnvVLDoJfauWGO6PRPj/DFgSHXHpcXnUsHFf1ifywDqb0Y1pI/eIzeIDjVGkPwaOF3mgTgU/VQN7YuLdYhmWO0ADxNdaYatehEGbm+S4VW6h7lA3+x3u+Ge4QXlzoJwT00QP7Zmy/i6dgPKSL+7Pex7GHxn9ZbXX25Fn57UnMxrB6e/1JGbhCca00heMTwO00C8Dl6GPXW6hnvuQdrxACcKmyL1GI9gpHru1IfuXocNfE3pdp9S27jNVsg6t2PvcuGSJqm2G9e3+PxTVP7BmvvFewa1fogstTFr/ZGbhBcYg09Zr18eD2HAPksqwwAABwQSURBVHye9NrWKfKb7rGM8IyPGICnqc47snav/cj1XamOvJHatqWGQS+9XpimqY8g1Wru7IjSNEUP96z3CnaNai2GtfRe/5EbBJfa9Zg9t3y/FHxvPaVBFrz6iAB8mW3E7dJ7g0eZmjJqAJ6mKtsiVV0Qa9T6rlR7Z5Thz3sFh0E/tz63KloHqi/Xy29U55D6GLou/HasxmqVrc+xtFEbBLmk149sRb4qtypLCHkC8OW+R6Ql9gaP0Ot7aOQAXGNbpJpzMEet70rVUSMNf94r9dF6pJ7wi5TaSPqkiy0E/9Wu4m4dfpsuXsZxpRfDGqWH4RKjNghy2+0f3/Sdk+Gd9TRSMPiMAJxPza0RCz/fL70udPWZkQPwNNXZdaHiuTyVOP4Kx11kNMeII1J9DMighzlgq7rgM/WwkIfwO46SDbtFL4ywM2qDoJTdNmvFnqlC76vnpX1QFYDzG/HZ3j3fL9uIuzRonTx6AK6yLVKlIagj1nelPvSPOuy35POYBn3HnKWTPWWF4J1Owu/Qc+fWptRiWEtf/GpvxAZBDSOEhf3WdGmB7ysBuJzds939aIfd832bBn++Rw/A01Rn0ckav80R67tSPfAjD/ktdU1GHGFykU5C1+p7HPXIc45SXwOX1qP2NyM2CGrKtY965vriaenPpwBc3teIn7HZPLRu/3zwfD+O3Dh/bwkBeJrKr58TES+lR12NVt+Vat+M/h5MhdYIarE1V3NCcFvCL5fIHVBGHRp0jtEaBK18j0i7lXWLXK859UMve7LXIADXdRPxq1UYjoiXiHi8ubr6nRbYBlpKAJ6m8quLlx55NVp9l7vnPSJelvLxNBXa3nYp62icpJOFl1a36nAPq3KvbtjDwuwWMHrKVdb0PMRmc5/z2u1L6/MqKU1T7ALDfakGVUQ8xWZzfxPxKy0wFByz+yid/blcSuOvpG8RP7YRt7tAXKKX5TkiHrcRdyMuwnOqUs9yy7bi4fsvdyn5kW+0+i7j8T4uYTrBR3bvq7tF1RHfI1LtH3iy9U5VPYTfFg/7koZ3Aa/11deIn9uI223E3cyGy+M24m4bcXdzdfX7a8TPtfTwMpZvET92z/fd7vl+OPp8bzYP/zzfEb/WEHYBLrbr1akeBtNrCC7yVf+UENzFV4hCUicfGlpc433DofbfBQAAOrafNxERLy2+HK61d7K01En4bfJhZfdMCcAAAMAb7xcOaNVb1zoEL2lxpk4WG2s1quDPwTEIwAAAwL8+WjmvRQjeRtwKwZfrJPz+qT3HLn3Q4y0AAwAAb/xt6fjYbO5rH0sX2/QMvE3SWq/fLvQ/f3AsAjAAAPCvz/ZOa9EjenN19buHHsw0WAjuJPw+pTbh98PnRQAGAADeOLZ5eGw2D6mjUFMxzA2zTdJa51DvVzD/LJDXPiYAAKBjxwJwqx7RXkJwz3vqpYMVj9cWfuf0eAvAAADAG3MCcKsQ/D0itd7K58t1n9skpQ62OWp1beYO9xaAAQCAN+YG4F2geG69tU2rso24q3nen9n1jje/Jo22zLo/4XkVgAEAgH+dEoB3oaLV/q6PrQNfD9sk9TI0/CbiV+1zP3W4twAMAAC8cWoA3gegFnNju5jv2nCF6E5Wem7zAeSMey8AAwAAb5wTgPel0RDYHkJw1R7Q1EsP+GBD4AVgAADgjUsCcKsQ3ENP6C5gPX6PSCXPdRtx23rI8+5cq/d8pwvnfwvAAADAG5cG4C/X1/+Lzea+9nH3EoJ35/+Qc0h4mqbYRtxFxHPrc2sVfndznS86fwEYAAB4I0cA3ofAFsfeQ+/oQeB6js3m/pww/D0i3Vxd/e5hqPP7+5oG3QNaAAYAAN7IFYBHD0uFAvFTbDYP24i7m6ur318jfn6N+HkT8Wsbcbfr5X3qpaf3o/tZ815OU96PGgIwAADwRs4AvAsdrYbLNt8Xd0mlxb7HuYe1C8AAAMAbuQNwqxCcLlwwSfm3LGVhMwEYAAB4o0QA3oWPVlvmPLUOkKOWiHhZ0tZWAjDAcnyPSPspRLHZ3O+mEH1cNpv7bcTdTcSv0rs15PY14uc24vbTc9xPrxrw/ACaKxWA94Gqdgiepj72Ch6tLPFeLTEAHz3nBiuy5zJnPn/pofkl34eXlqWdz9ySa4X9gu+Z58NAknNHgBzmPAO9HfNemqbYLw556doQEfESm83DzdXV71R5hNocXyN+xmbzcO557hfhbFGPAwyndAMpIl5uIn7VPi8h+LR71Ki3vuiK12sMwF+u+23MHjNnMTgBeDnnM7f0HoD/ViLisYewNWIA3i2GWKx+2IfhHnpOd+eadfpWRDy3GM0FMIxaDaSlzCtdWlnyfO21BuCIeG59nKfaRtzNOTcBeDnnM7eMGoAPfo9Nw9ZIAXgXBp+q3p9G9ybV+Qj83Mu9BehKzQaSENxXaRF+v0ekWouVrTUAf7m+/t824rb1sc6VXhuCs4b9CcDLOZ+5ZfQAvC8R8dJidf0RAvCuXnhqeX9q3pva2zfGZnOfOhz2DdDMt4gfVRsBg+8tu5Syhj2bI+Kx5vnVcMK5v6RBGjxze3+/XAvASzqfuWUpAXhfan947D0AbyNuW9+Tw3tTejpQq4/yEfGnhyHfAN2o/iJuEIJrh6+ey1quf4veltKWdv7fI1JP59RzYFza+cwtSwvAX67rhuBeA3CqMAT43FJqtFrtDocPnrsXIRhgZ87iMwVexE+pTQ/kqvcKbjE0dreKZ/WPD0tcBOTUa9B7Y+fUxeoE4OWcz9xSKwD/s5rz/HLpqsRVQnCPATjXVJhP7tnl/3bmD8XphKkeh8/IfnXx9+WcZ3DE9SEAimm1YvKSF2DqsaxtDnYaZAjwKc74jXU7DPyccNZDAG49X/IUaZria8TPXGXOcNVtxG3Ov5ky/Y5LPVvfIn7cXF39PmcLmxq/z96e6UtGA0XE4/75mvu39tsonfG3sk4jmXsM+7nicz9e3kT8mtuGW+JHYYCztewlaDEvJXU89KrQNW6yFdUpczsLnPPiFsCapvOGcfYa2M5Z9EYAbmvk61Pj2UrTFLveudkBr/T16umepde69/nU+uuUQPjZ395G3M79+znrzLltrIh4TGeG7u8R6bMgvNQ6EeAiLVdgbLEP7TStY6/gtV7bXhvhlzrzGeiu4XMT8euccxGA2xr5+tR8ttIJH1kj4k+uv/uRXu5ZOmP01TbiLhUYyXNsWk5sNvc5/96c9lWu6Ul/21e4198lQFM9LM7QIqi17KWscE2Lr2j5kdbht+dhv5c695r0NvTt3HUHBOC2Rr4+LZ6tue/Cku/pXu7ZKfVCjborTVPEZnP/0d9OGUP3nIX+isw3Pji3FgtfAgyjhz1z1zZPtVRZ6/zqFour1XTBdelm8ZNLfm8CcFsjX59Wz9acd2LuHsdDPdyzU0Z81N6i7ybi1/6DXIkP8cc+so+0ZR3AYvWwXVCTEPxaCS5im6RL5hGdK/UQflfwlfuS69PDtkjpjJVQa55DD2GhZyNfn1bP1pxrVnIYdOt7lk74zbd8h5fqcT42/Lnkxw8ATtBDCG5RKfRw3hmuW6s9fp/Xdt4tfHoNjsw57KGnYUZvyKfPkQDc1sjX59hxl3y25nwcLPW3W9+zuUOfl/oOP3beLaYpAfAXaw01ufYnbFFa7PHbw0eDHno2azl2HY49uy0bmbvf1qfPyrHGugDc1sjXp+V7ZM5aE6WuW8t7Nmf+65frNlN2akjTFMfOvfUxAvBO6mFY60qH855a1jpsvLfFnUr77FpsI+7mNHZrbzu2d6wnaL9a9bFzLHmMIwe8Gka+PseOu+Sz1fK6tfzbPSwC1tKca9/6GAH4QOogDDZb0GmAbZJarZ7dw8Jhawu/0zQvHB6dc9ZgW6Q5PUH7Rviccyxl5IBXw8jX59hxl3y2Tnn+c2t1z+b2/i55BI8ADDCwdMKehqVKqyFSPYfgiHhutHXUbePzfum1kV3anIZky8b238xYCOafodlzzrGUkQNeDSNfn2PHXfrZanXdWt2zOcO+I+I5LXDo854ADLAArcPgmns7P7gWq/wg0OoZ6MVn1+awAT9juHG1bZFOHZY99xxbHWuvAa+Gka/PseMWgPOas4ZIi3Urakoz5gDfRPxqfZwAHLHWANTDfNeDa1B9XvQ0rffe9+RIY/Ju/9+lGVuP1BpCfmwKxfvgccp/m9vIAa+Gka/PseM2BzifbxE/5rzP04J7f/dmXIfqU1IAOEPrHtGIeGkx/7OHFY9brOKbVjoPvEefXaP3DfgZWw4Vb4Aee1d8dAynnGNuIwe8Gka+PseOu+SzNafOTIV+iy3uWWw29z3WZS3MqTuXPA8aYFFah+Av120WQUqvYfCp9rm2Cv1J+O3KKY2o9Hrvnls1vM79+y0biiMHvBpGvj7HjrvoPsANpyQ0CcAz6oy1DP2d8zFg9/wtejg4wGLcXF39bt0j2urL6Tbitta5R8RTi61rutgLOuIpCb//OPW3MOdDValna0YP9IeN/pa/95EDXg0jX59WdUmaMR2hZG9o7XuWZsx7jYiXXH+vdzcRv06o75pMbwLgRGsdFjxNrxX9NuKu1PlHxFOrxuSa72vPzmnAn7ICcy7pgjnI55xjLiMHvBpGvj7HjrvUszVnNeSSvaG179mcvxcRj7n+3ghO+ZAcES/biLskCAP0rYuw1PDLaZqm2PWGXzxUOCJeYrN5aLnYUw8Lfgm/HzunAd/jHMCI+JPzHHMZOeDVMPL1OXbcJZ6t7xHpaO9v4RXZa9+zOdvkrW3O6ym9wO/aAvdrX/gRoGu7in71c0W/R6Sbq6vfsdk8zLkeEfESEU/biLseGo49zO02F+rvzm1UHtvHO+dKpJfuQ9yy4TxywKth5Osz471zl/PvpZnrJ5Re26H2PZsz57XXZ6SkS9YOiYg/24jbFlOhADgidbJgUm+VxPeI9DXi5/vS+rjem/PlvnRpsdDXSM5twM8JpbmGYV4ats89xxxGDng1jHx9jh13zmcrzawLPxsJkUv1ADwj6K2xVzPNmBYyt40jDAN0JvURgle/X+ypetjjV/g97pIG/IxhyRcPxZzT2D7WcLvkHGscf0T8iYinUqXn34EAfNzcxSFr1VM9BuBcf2s0uaeL7cNwMl8YoA89BCoheB73ahyXNODTjB6IS0NAjgW3Sh7fMXPCQunS8/xIAfhj6Yx1IGp96GgQgI9eg1x/a0S7EJy9kyA2m4def3sAq9I6WNVsZIwo6a0fzqUN+BlbE72kM3sTjs0fj4iXOcP2Lj3HSwjAn1tyAN4HiLnl5urq924XgKee66Xa92zO+ef6W6NK0xRz9wc+o05ttnsEADtztoAoXYTg/0p9hN8/wu9pPruec4PTsS05YrO5P+fYjv27c48vx79xLgH4c0sOwJXeedWnegjA/dr1Bj8VetbsKQzQUg8rC9tW51+dbFvVfMXuEX12TecGpzm/x1MXWDm2gNopPcs5zvFcAvDnBODL3nktPvgJwP37HpF2O0dkrZcj4qXkHtMAHCEE90H4Hdtn1/WU4HR0ru4J2yKlGXOLT+n1ynWO5xCAPycAn/W+a7rAnwA8lt1c8k9X0j+1GAUH0FAn4esprTR8+Qgxvs+u7SnBKWejeMa84pNWl851jucQgD8nAJ9U1/zpIXhYBGtM6d+F1R5ztJt6eBYBVquTELy6Hkjhdxk+u76nBqcZ+/Ue3aO0xP7COc/xVCMHvBpGvj6V6pbn3vZotQ3SMtxE/LpkmPTcRQgBKGQXgp9bhLDDhspaFmAqtdrkKaXnXq2R5LzGs8LrkV6DYyu9nzKUusQ5nmrkgFfDyNen1ruut562HgPwWureUm4ifp0zTPqc9zEAGaU+ViFe/BY8tqJals+u8znhcM7w5fSX0RKlGta5z/EUIwe8Gka+PkfrgyPbIJ2yz29PCw9VD8AzPrj2dH1G9j0inRqEe/19AqxG6iQELzGgpddr+9Ty2n65Fn5z++xanxMO04wFrP72785YSOuxh3M8xcgBr4aRr8+x4z5hG7GjgaOn4aa179mcrQ+NCMrra8TPuUOjz30vA5BRet0Q/kFQyyd18mFh6b3rLZRoVM7Zwuh9Y35Oo/rcANCy4TxywKth5OuTK5Sl1/fr84x34NE59DXUvmdz/p6huPmdMrWs9bECsNNDCI7N5r71dbhUJ/Orhd9CSoXDY8/M+wXMZvz3Z/+WSp3jHCMHvBpGvj7Hjjv3Kuq91Cm171mapphzbXL9Pf41d5HRXn+jAKs0Z+hU8fA28ErFvaywLfyWUyoc3kT8OnZv9z26x1YUj4iXdMEq66XOcY6RA14NI1+fY8d96rM1t75qfT1a3LM5H2HNAy7j2Iie3bN+2/o4ATjQxXY9A26T5LqtQ8lweHRO764369jw+kuPo+S/fczIAa+Gka/PjFBwd+q/OWedhUs/CF2qSQCesRDWyB+be5Zm9MCbgw3QIWHuNK7XepRs1BxrKEfEy4z/5q+rRvdwjseMHPBqGPn6lAgFu1V4j466aTnntcU9mzOi5Mv19f+SOqOIYx9mBGCATnUynLf7uaydzJ32Jb+S0o2aGfv6Pn/2/+dYTK5lw23kgFfDyNfn2HGf+2zNDXutQkerezan/hbEyjjWA++6A3SslxDcY4MudbJ6tvBbV+lGzfeIdMFvJcuqty0bbiMHvBpGvj4lw9icIb9frq//1+KDarMAPKN+aj08fKmOzU8XgAE6twvBTbf0+XLd1zZJqYNtjlSibdS4H+cuRperEd3ymRs54NUw8vUp+T5LM9/JOaYInKrVPfsW8WPOe6OHlbKX5tjHB3U3wABSJ4Gvh4q6h22Ovlz39UFgTWo0atLr7+2kkRc55zi2bLiNHPBqGPn6HDvuS5+tuSOWIuIx0ynN0vKezVkkrOdnZlTHrrvrDTCI1E8IfkiNhmx9jfjZw5Bw4bedWuFwzlYahyXn0M5a5/iRkQNeDSNfn2PHnePZmvu7qbkNTct7Nnu/5AY940t27Hrvt7QDYBBdzHttsNdtF3skD7Ao2NKVbsAfmjvSIPc88Jrn+N7IAa+Gka/PsePO9WxFxOOc302td2nreza3F7jlStlLcmxRtoh4aX2MAJyhhxC8a/jfp8JfrXe9vrOCSNFzFX67UKMBvze39yZ3b0LNc3yvdVjo3cjX59hxZ55CcPSdXWvruNb3bO5c4F2d2mRRxd12Vk8ljuHm6up3RDxtI+5Shfs9Yz93C1cCjOrUIZolg2FsNve5Q8C+0mx9fvuGmiFTfajRgD/UYj/J2n/vUOuw0LuRr8+x4875bM0e+lshjPRwz04ZwRQRT6nicOiP5m7nui/v2ykR8VzyWs/Zkusm4lepvw9ABTdXV79bh8P3Ffc24vbcsHgT8Ss2m/vW83zfnVOVXgrmqdWA3/us96bUFia1z/FQD2GhZyNfn2PHnfvZmhv6Sq+p0Ms9O2UNj4h4rjHi6LMP6ZeG4F2v8od1eal39bG2Q0Q85/67ADRwE/Grp8B4WNFExOM24u4m4tfXiJ/vyzbidhd4n1of71/O4TEJv12p2YDf241GeHn3bBRroLY4x71ewkKvRr4+x467xQiK3W/ppeQIm17u2dxVst9cm0LTjA6HPB/7++f+jWNzwSPiKdd9n3ttbX8EsCDnVKzK0YrfPKEOtWzcfIv48TXiZ+nh8C3PsZew0KuRr0+LcPBZL+Cb923En9x/e6+nezZ3aPi7a/OyjbjL8d75FvHjlDVEzl0w6oTVr18unRu8jbid+Yzp/QVYml72x11C6WG/Yz722X1bytf9lufYU1jo0cjX59hxFxtBMWNeZsn3bm/37JKpSxHxZxtxN/d4v0ekg6lFzyf+rbMXfpy7Evjh34rN5mHu/NzvEWkXfGefU6+/SwAulDrZK3jkYo/fvn127wTgy53TQ1Wr9NCA7S1MneLYcZd8tmKzuZ/1/i2wQFGP9+yjaRXnlIh4iYinD8rzpf/uJVM80oVtkYh4is3mYRtxd1gi4vGcf9dHbYCFS0Lw2UX47d9n908AvpwAfPn16eE4P3LsuEs+W2lmvVRiYble71mvU5dy7XqQOmmLmM4EsCK97BU8QrHH7zg+u48C8OUE4MuvTw/H+ZFjx11jDv3MuZpPOf9uz/csvYbEp9a/rX+u/WbzkDJ+gEjTFC3bIsIvwAoJwTMqSOF3KJ/dSwH4cgLw5denh+P8yLHjrvH7mbt/fe09iVvfs1xDoi+oB59L7o+7263iueY5LaU+AOAMcxscayy5hnpRzxoaPC3PUQC+/Pr0cJwfOXbctX4/cxdIynUdR7lnaZpiN8+1WhDOsQpzb+cXEX96uJ8ANHbJqpNLLRHxJ9njdzif3VMB+HIC8OXXp4fj/Mix4671+0mvw37nDIXOMh94tHuWXoPiSSscn1H/PW8jblODOjAVCsIR8WwdDwDe2A1B6m7BjRYl9zwn6vnsvgrAlxOAL78+PRznR44dd83fz25/4KM9wRHxeOnfGvmefYv4sQuLTxfXexFP24i7nqb87LZoejg37EfEc2w2D73ePwA60OuqkzWLRTEAGNHXiJ83V1e/txF3u719P9oC6XG/bdBNxK+eAu9nvkekrxE/D7Y8+u+5bTb3+/MyfQmA2XYhuPnWBC3KUnoIAQAAmCl1sj9fzWJuEAAAwEql1xA8azXOkUtEvJTc3gEAAIBBLHmvYHv8AgAA8MY24q51WC0Qfv8IvwAAAPzHkvYKtscvAAAAn1rCXsER8ZiEXwAAAI4Zea9ge/wCAABwkhH3Ct5G3La+bgAAAAwoDbRXsD1+AQAAuEiapuh5myTbHAEAAJBVbDb3rcPuB+H3WfgFAAAgu562SbLNEQAAAEX1sE1SbDYPSfgFAACgtJYrRG8j7lqfPwAAACuSXhfHqjYvOCKev0b8bH3eAAAArNT3iFRyleiIeLbFEQAAAN3YBeH7iHjOFHwfBV8AAAC69i3ixzbiLiKeTunpjc3m4ebq6neywBUAAAAj+h6Rvkb8/Brxcxtxu424u4n4tf/fWh8fn+T/QivtqurtIMQAAAABJRU5ErkJggg==
      mediatype: image/png
  installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - monitoring
    - metrics
    - victoria-metrics
    - victoriametrics
    - prometheus metrics
  links:
    - name: GitHub Repository
      url: https://github.com/VictoriaMetrics/operator
  maintainers:
    - email: info@victoriametrics.com
      name: VictoriaMetrics
  maturity: beta
  provider:
    name: VictoriaMetrics
